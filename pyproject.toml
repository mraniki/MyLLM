[project]
name = "MyLLM"
version = "4.19.6"
description = "A python package to interact with llm model supported by g4f and langchain."
authors = [
  { name = "mraniki", email = "8766259+mraniki@users.noreply.github.com" },
]
# license = { text = "MIT License" } # Or use identifier: license = "MIT"
license = "MIT" # Use SPDX identifier (preferred over file link for setuptools)
readme = "README.md"
keywords = ["chatgpt","llm","ai","llama","ai", "g4f", "freegpt"]
# requires-python = "^3.10" # Copied from tool.poetry.dependencies
requires-python = ">=3.10" # Use standard PEP 621 specifier
classifiers = [ # Add standard classifiers if desired
    # "License :: OSI Approved :: MIT License", # Removed, covered by license field
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
  "fastapi>=0.95.2",
  "uvicorn>=0.22.0",
  "dynaconf>=3.2.0",
  "loguru>=0.6.0",
  "httpx>=0.24.1",
  "g4f==0.5.2.1", # Pinned version, keep as is
  "js2py~=0.74",
  "PyExecJS2==1.6.1", # Pinned version
  "curl_cffi==0.10.0", # Pinned version
  "Brotli==1.1.0", # Pinned version
  "openai==1.77.0", # Pinned version
  "groq==0.24.0", # Pinned version
  # "crawl4ai==0.3.72", # Kept commented out
  "playwright==1.52.0", # Pinned version
]

[project.urls]
"Homepage" = "https://github.com/mraniki/MyLLM" # Example, adjust if needed
"Changelog" =  "https://github.com/mraniki/MyLLM/blob/dev/CHANGELOG.rst"
"Support" =  "https://github.com/mraniki/MyLLM/discussions"
"Issues" =  "https://github.com/mraniki/MyLLM/issues"

[project.optional-dependencies]
dev = [
  "python-semantic-release>=8.0.8",
  "ruff~=0.11",
  # "black^24.0.0", # Kept commented out
  "pre-commit~=4.0",
]
test = [
  "pytest~=8.0",
  "pytest-cov~=6.0",
  "pytest-asyncio~=0.26",
  "pytest-mock~=3.11",
  "pytest-loguru~=0.4",
]
docs = [
  "sphinx==7.4.7", # Pinned version
  "pydata-sphinx-theme~=0.14",
  "sphinx-hoverxref~=1.3",
  "sphinx_copybutton==0.5.2", # Pinned version
  "myst_parser~=4.0",
  "sphinx_design~=0.6",
  "linkify-it-py==2.0.3", # Pinned version
]

[build-system]
requires = ["setuptools>=61.0"] # Specify a reasonable minimum setuptools version
build-backend = "setuptools.build_meta"

[tool.setuptools]
# packages = ["myllm"] # Keep commented out or remove
[tool.setuptools.packages.find]
where = ["."] # Search for packages in the root directory (where pyproject.toml is)
include = ["myllm*" ] # Include the myllm package and its subpackages
exclude = ["tests*", "docs*", "examples*"] # Exclude test/doc/example directories

# Keep existing tool configurations
[tool.ruff]
exclude = [
  ".github/*",
  "docs/*",
]

[tool.ruff.lint]
select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "I",  # isort
  "W"
]
#ignore = ["E401","F401","F811"]
fixable = ["ALL"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

[tool.pylint.exceptions] # Assuming this is used by pre-commit or linting, keep it
overgeneral-exceptions = [
    "builtins.BaseException",
    "builtins.Exception",
    "builtins.RuntimeError",
]

[tool.pytest.ini_options]
pythonpath = "."
testpaths = "tests"
python_classes = "Test*"
log_format = "%(asctime)s - %(levelname)s - %(name)s - %(message)s"
log_level = "DEBUG"
addopts = """
-v
--show-capture=stderr
"""
asyncio_mode = "auto"

[tool.coverage.run]
omit = [
    "tests/*",
    "examples/*",
    "docs/*",
    "*/config.py"
]
  
[tool.bandit]
exclude_dirs = ["tests","docs"]
skips = ["B101","B104"]

# [tool.semantic_release]
# upload_to_vcs_release = true
# version_variables = ["myllm/__init__.py:__version__"]
# # build_command = "uv build --sdist --wheel" # Removed - build will be a separate step
# # commit_parser = "emoji"
# commit_parser = "angular" # Use angular parser for better structure
# version_toml = [
#    # "pyproject.toml:tool.poetry.version",
#    "pyproject.toml:project.version", # Point to the standard project version
#    ]

# [tool.semantic_release.commit_parser_options]
# major_tags = ["BREAKING", "💥"] # Breaking change keyword or emoji
# minor_tags = ["feat", "✨"]     # New feature keyword or emoji
# patch_tags = [                  # Fixes, updates, dependencies, refactoring, docs
#     "fix",
#     "Update", # Added based on user request
#     "🐛", # Bug fix
#     "⬆️", # Dependency bump
#     "♻️", # Refactor
#     "📝", # Docs
# ]

# [tool.semantic_release.changelog]
# # template_dir = "templates"
# changelog_file = "CHANGELOG.md"
# # exclude_commit_patterns = []
# # exclude_commit_patterns = [
# #     "^Merge pull request",
# #     "^Merge branch",
# # ]
# # Define sections based on Conventional Commit types
# sections = [
#     { title = "💥 Breaking Changes", types = ["BREAKING"] }, # If using BREAKING keyword/footer
#     { title = "✨ Features", types = ["feat"] },
#     { title = "🐛 Bug Fixes", types = ["fix"] },
#     { title = "⬆️ Dependency Updates", types = ["⬆️"] }, # Map specific emojis if needed
#     { title = "♻️ Refactors", types = ["♻️", "refactor"] }, # Map type/emoji
#     { title = "📝 Documentation", types = ["📝", "docs"] }, # Map type/emoji
#     { title = "👷 CI/CD", types = ["ci", "build"] }, # Example for CI commits
#     # Add other sections as needed
# ]

# [tool.semantic_release.branches.main]
# match = "(main|master|dev)"
# prerelease_token = "rc"
# prerelease = false

# [tool.semantic_release.publish]
# dist_glob_patterns = ["dist/*"]
# upload_to_vcs_release = true
# upload_to_pypi = true # Enable PyPI upload within semantic-release





[tool.semantic_release]
upload_to_vcs_release = true
version_variables = ["myllm/__init__.py:__version__"]
commit_parser = "emoji"
version_toml = [
   "pyproject.toml:project.version",
   ]

[tool.semantic_release.commit_parser_options]
major_tags = [
    "BREAKING",
    "💥",
    ":boom:",
  ]
minor_tags = ["feat",
    "🥚",":egg:",
    "🚀",":rocket:",
    "💄",":lipstick:",
    "✨",":sparkles:",
]

patch_tags = ["fix","bump","Update",
    "🎨",":art:",
    "🐛",":bug:",
    "🚑",":ambulance:",
    "⚡",":zap:",
    "🔥",":fire:",
    "🚨",":rotating_light:",
    "♻️",":recycle:",
    "🔧",":wrench:",
    "⬆️",":arrow_up:",
    "🩹",":adhesive_bandage:",
    "👷",":construction_worker:",
    "📝",":memo:",
    "🔒",":lock:",
    "👽",":alien:",
    "💬",":speech_balloon:",
    "🥅",":goal_net:",
    "✅",":white_check_mark:",
    "🐳",":whale:",
    "🙈",":see_no_evil:",
    "⚗️",":alembic:",
    "🧐",":monocle_face:",
    "🔇",":mute:",
    "🔊",":volume:",
]

[tool.semantic_release.changelog]
# changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.branches.main]
match = "(main|master|dev)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
